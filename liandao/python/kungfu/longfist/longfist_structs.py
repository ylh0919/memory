#!/usr/bin/env python
# -*- coding: utf-8 -*-
# auto generated by struct_info_parser.py, please DO NOT edit!!!

from ctypes import *

import longfist_constants as lf

from longfist_structs_sniffer import *

class LFMarketDataField(Structure):
    _fields_ = [
        ("TradingDay", c_char * 13),    # 交易日 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("ExchangeInstID", c_char * 64),    # 合约在交易所的代码 
        ("LastPrice", c_double),    # 最新价 
        ("PreSettlementPrice", c_double),    # 上次结算价 
        ("PreClosePrice", c_double),    # 昨收盘 
        ("PreOpenInterest", c_double),    # 昨持仓量
        ("OpenPrice", c_double),    # 今开盘 
        ("HighestPrice", c_double),    # 最高价 
        ("LowestPrice", c_double),    # 最低价 
        ("Volume", c_int),    # 数量 
        ("Turnover", c_double),    # 成交金额 
        ("OpenInterest", c_double),    # 持仓量 
        ("ClosePrice", c_double),    # 今收盘 
        ("SettlementPrice", c_double),    # 本次结算价 
        ("UpperLimitPrice", c_double),    # 涨停板价 
        ("LowerLimitPrice", c_double),    # 跌停板价 
        ("PreDelta", c_double),    # 昨虚实度 
        ("CurrDelta", c_double),    # 今虚实度 
        ("UpdateTime", c_char * 13),    # 最后修改时间 
        ("UpdateMillisec", c_uint64),    # 最后修改毫秒 
        ("BidPrice1", c_int64),    # 申买价一 
        ("BidVolume1", c_uint64),    # 申买量一 
        ("AskPrice1", c_int64),    # 申卖价一 
        ("AskVolume1", c_uint64),    # 申卖量一 
        ("BidPrice2", c_int64),    # 申买价二 
        ("BidVolume2", c_uint64),    # 申买量二 
        ("AskPrice2", c_int64),    # 申卖价二 
        ("AskVolume2", c_uint64),    # 申卖量二 
        ("BidPrice3", c_int64),    # 申买价三 
        ("BidVolume3", c_uint64),    # 申买量三 
        ("AskPrice3", c_int64),    # 申卖价三 
        ("AskVolume3", c_uint64),    # 申卖量三 
        ("BidPrice4", c_int64),    # 申买价四 
        ("BidVolume4", c_uint64),    # 申买量四 
        ("AskPrice4", c_int64),    # 申卖价四 
        ("AskVolume4", c_uint64),    # 申卖量四 
        ("BidPrice5", c_int64),    # 申买价五 
        ("BidVolume5", c_uint64),    # 申买量五 
        ("AskPrice5", c_int64),    # 申卖价五 
        ("AskVolume5", c_uint64),    # 申卖量五 
        ]

class LFPriceLevelField(Structure):
   _fields_ = [("price", c_int64), ("volume", c_uint64)]
   def __repr__(self):
      return "{}@{}".format(self.volume, self.price)

class LFPriceLevel20Field(Structure):
   _fields_ = [("levels", LFPriceLevelField * 20)]
   def __repr__(self):
      ret = ""
      for l in self.levels:
        ret += "{};".format(str(l))

      return ret

class LFPriceBook20Field(Structure):
   _fields_ = [
        ("InstrumentID", c_char * 31),     
        ("ExchangeID", c_char * 16),     
        ("UpdateMicroSecond", c_uint64),
        ("BidLevelCount", c_int),
        ("AskLevelCount", c_int),
        ("BidLevels", LFPriceLevel20Field),    
        ("AskLevels", LFPriceLevel20Field),    
        ("Status", c_int),#FXW's edits
        ]
class LFFundingField(Structure):
    _fields_=[
        ("InstrumentID", c_char * 31),     
        ("ExchangeID", c_char * 16),     
        ("TimeStamp",c_uint64),
        ("Interval",c_uint64),
        ("Rate",c_double),
        ("RateDaily",c_double),
    ]
class LFWithdrawField(Structure):
    _fields_=[
        ("Currency", c_char * 32),     
        ("Volume", c_int64),
        ("Address", c_char * 64),
        ("Tag", c_char * 64),    
        ("ID", c_char * 64),    
    ]

class LFTransferField(Structure):
    _fields_=[
        ("FromName",c_char*32),
        ("From",c_char*64),
        ("ToName",c_char*32),
        ("To",c_char*64),
        ("Currency",c_char*32),
        ("Volume",c_int64),
        ("Symbol",c_char*32),
        ("ID",c_char*64)
    ]
class LFQuoteRequestsField(Structure):
    _fields_=[
        ("InstrumentID",c_char*32),
        ("Expiry",c_char*32),
        ("ExchangeID",c_char*16),
        ("ID",c_int64),
        ("Price",c_int64),
        ("Volume",c_int64),
        ("OrderBSFlag",c_char*2),
        ("RequestExpiry",c_char*32),
        ("Time",c_char*32),
        ("Status",c_char*9)
    ]
class LFL2MarketDataField(Structure):
    _fields_ = [
        ("TradingDay", c_char * 9),    # 交易日 
        ("TimeStamp", c_char * 9),    # 时间戳 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("PreClosePrice", c_double),    # 昨收盘价 
        ("OpenPrice", c_double),    # 今开盘价 
        ("ClosePrice", c_double),    # 收盘价 
        ("IOPV", c_double),    # 净值估值 
        ("YieldToMaturity", c_double),    # 到期收益率 
        ("AuctionPrice", c_double),    # 动态参考价格 
        ("TradingPhase", c_char),    # 交易阶段 char
        ("OpenRestriction", c_char),    # 开仓限制 char
        ("HighPrice", c_double),    # 最高价 
        ("LowPrice", c_double),    # 最低价 
        ("LastPrice", c_double),    # 最新价 
        ("TradeCount", c_double),    # 成交笔数 
        ("TotalTradeVolume", c_double),    # 成交总量 
        ("TotalTradeValue", c_double),    # 成交总金额 
        ("OpenInterest", c_double),    # 持仓量 
        ("TotalBidVolume", c_double),    # 委托买入总量 
        ("WeightedAvgBidPrice", c_double),    # 加权平均委买价 
        ("AltWeightedAvgBidPrice", c_double),    # 债券加权平均委买价 
        ("TotalOfferVolume", c_double),    # 委托卖出总量 
        ("WeightedAvgOfferPrice", c_double),    # 加权平均委卖价 
        ("AltWeightedAvgOfferPrice", c_double),    # 债券加权平均委卖价格 
        ("BidPriceLevel", c_int),    # 买价深度 
        ("OfferPriceLevel", c_int),    # 卖价深度 
        ("BidPrice1", c_double),    # 申买价一 
        ("BidVolume1", c_double),    # 申买量一 
        ("BidCount1", c_int),    # 实际买总委托笔数一 
        ("BidPrice2", c_double),    # 申买价二 
        ("BidVolume2", c_double),    # 申买量二 
        ("BidCount2", c_int),    # 实际买总委托笔数二 
        ("BidPrice3", c_double),    # 申买价三 
        ("BidVolume3", c_double),    # 申买量三 
        ("BidCount3", c_int),    # 实际买总委托笔数三 
        ("BidPrice4", c_double),    # 申买价四 
        ("BidVolume4", c_double),    # 申买量四 
        ("BidCount4", c_int),    # 实际买总委托笔数四 
        ("BidPrice5", c_double),    # 申买价五 
        ("BidVolume5", c_double),    # 申买量五 
        ("BidCount5", c_int),    # 实际买总委托笔数五 
        ("BidPrice6", c_double),    # 申买价六 
        ("BidVolume6", c_double),    # 申买量六 
        ("BidCount6", c_int),    # 实际买总委托笔数六 
        ("BidPrice7", c_double),    # 申买价七 
        ("BidVolume7", c_double),    # 申买量七 
        ("BidCount7", c_int),    # 实际买总委托笔数七 
        ("BidPrice8", c_double),    # 申买价八 
        ("BidVolume8", c_double),    # 申买量八 
        ("BidCount8", c_int),    # 实际买总委托笔数八 
        ("BidPrice9", c_double),    # 申买价九 
        ("BidVolume9", c_double),    # 申买量九 
        ("BidCount9", c_int),    # 实际买总委托笔数九 
        ("BidPriceA", c_double),    # 申买价十 
        ("BidVolumeA", c_double),    # 申买量十 
        ("BidCountA", c_int),    # 实际买总委托笔数十 
        ("OfferPrice1", c_double),    # 申卖价一 
        ("OfferVolume1", c_double),    # 申卖量一 
        ("OfferCount1", c_int),    # 实际卖总委托笔数一 
        ("OfferPrice2", c_double),    # 申卖价二 
        ("OfferVolume2", c_double),    # 申卖量二 
        ("OfferCount2", c_int),    # 实际卖总委托笔数二 
        ("OfferPrice3", c_double),    # 申卖价三 
        ("OfferVolume3", c_double),    # 申卖量三 
        ("OfferCount3", c_int),    # 实际卖总委托笔数三 
        ("OfferPrice4", c_double),    # 申卖价四 
        ("OfferVolume4", c_double),    # 申卖量四 
        ("OfferCount4", c_int),    # 实际卖总委托笔数四 
        ("OfferPrice5", c_double),    # 申卖价五 
        ("OfferVolume5", c_double),    # 申卖量五 
        ("OfferCount5", c_int),    # 实际卖总委托笔数五 
        ("OfferPrice6", c_double),    # 申卖价六 
        ("OfferVolume6", c_double),    # 申卖量六 
        ("OfferCount6", c_int),    # 实际卖总委托笔数六 
        ("OfferPrice7", c_double),    # 申卖价七 
        ("OfferVolume7", c_double),    # 申卖量七 
        ("OfferCount7", c_int),    # 实际卖总委托笔数七 
        ("OfferPrice8", c_double),    # 申卖价八 
        ("OfferVolume8", c_double),    # 申卖量八 
        ("OfferCount8", c_int),    # 实际卖总委托笔数八 
        ("OfferPrice9", c_double),    # 申卖价九 
        ("OfferVolume9", c_double),    # 申卖量九 
        ("OfferCount9", c_int),    # 实际卖总委托笔数九 
        ("OfferPriceA", c_double),    # 申卖价十 
        ("OfferVolumeA", c_double),    # 申卖量十 
        ("OfferCountA", c_int),    # 实际卖总委托笔数十 
        ("InstrumentStatus", c_char * 7),    # 合约状态 
        ("PreIOPV", c_double),    # 昨净值估值 
        ("PERatio1", c_double),    # 市盈率一 
        ("PERatio2", c_double),    # 市盈率二 
        ("UpperLimitPrice", c_double),    # 涨停价 
        ("LowerLimitPrice", c_double),    # 跌停价 
        ("WarrantPremiumRatio", c_double),    # 权证溢价率 
        ("TotalWarrantExecQty", c_double),    # 权证执行总数量 
        ("PriceDiff1", c_double),    # 升跌一 
        ("PriceDiff2", c_double),    # 升跌二 
        ("ETFBuyNumber", c_double),    # ETF申购笔数 
        ("ETFBuyAmount", c_double),    # ETF申购数量 
        ("ETFBuyMoney", c_double),    # ETF申购金额 
        ("ETFSellNumber", c_double),    # ETF赎回笔数 
        ("ETFSellAmount", c_double),    # ETF赎回数量 
        ("ETFSellMoney", c_double),    # ETF赎回金额 
        ("WithdrawBuyNumber", c_double),    # 买入撤单笔数 
        ("WithdrawBuyAmount", c_double),    # 买入撤单数量 
        ("WithdrawBuyMoney", c_double),    # 买入撤单金额 
        ("TotalBidNumber", c_double),    # 买入总笔数 
        ("BidTradeMaxDuration", c_double),    # 买入委托成交最大等待时间 
        ("NumBidOrders", c_double),    # 买方委托价位数 
        ("WithdrawSellNumber", c_double),    # 卖出撤单笔数 
        ("WithdrawSellAmount", c_double),    # 卖出撤单数量 
        ("WithdrawSellMoney", c_double),    # 卖出撤单金额 
        ("TotalOfferNumber", c_double),    # 卖出总笔数 
        ("OfferTradeMaxDuration", c_double),    # 卖出委托成交最大等待时间 
        ("NumOfferOrders", c_double),    # 卖方委托价位数 
        ]

class LFL2IndexField(Structure):
    _fields_ = [
        ("TradingDay", c_char * 9),    # 交易日 
        ("TimeStamp", c_char * 9),    # 行情时间（秒） 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("InstrumentID", c_char * 31),    # 指数代码 
        ("PreCloseIndex", c_double),    # 前收盘指数 
        ("OpenIndex", c_double),    # 今开盘指数 
        ("CloseIndex", c_double),    # 今日收盘指数 
        ("HighIndex", c_double),    # 最高指数 
        ("LowIndex", c_double),    # 最低指数 
        ("LastIndex", c_double),    # 最新指数 
        ("TurnOver", c_double),    # 参与计算相应指数的成交金额（元） 
        ("TotalVolume", c_double),    # 参与计算相应指数的交易数量（手） 
        ]

class LFL2OrderField(Structure):
    _fields_ = [
        ("OrderTime", c_char * 9),    # 委托时间（秒） 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("Price", c_double),    # 委托价格 
        ("Volume", c_double),    # 委托数量 
        ("OrderKind", c_char * 2),    # 报单类型 
        ]

class LFL2TradeField(Structure):
    _fields_ = [
        ("TradeTime", c_char * 32),    # 成交时间（秒） 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("Price", c_int64),    # 成交价格 
        ("Volume", c_uint64),    # 成交数量 
        ("OrderKind", c_char * 2),    # 报单类型 
        ("OrderBSFlag", c_char * 2),    # 内外盘标志 
        ("MakerOrderID",c_char*64),
        ("TakerOrderID",c_char*64),
        ("TradeID",c_char*64),
        ("Sequence",c_char*32),
        ("Status",c_int),           #状态码
        ('Imbalance',c_int64),
        ('FairPrice',c_int64),
        ('IndexPrice',c_int64),
        ('MarkPrice',c_int64),
        ('TimeStamp',c_int64),
        ('Liquidation',c_bool),
        ]

class LFBarMarketDataField(Structure):
    _fields_ = [
        ("TradingDay", c_char * 9),    # 交易日 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("ExchangeID",c_char * 16),      #交易所代码
        ("UpperLimitPrice", c_int64),    # 涨停板价 
        ("LowerLimitPrice", c_int64),    # 跌停板价 
        ("StartUpdateTime", c_char * 13),    # 首tick修改时间 
        ("StartUpdateMillisec", c_int64),    # 首tick最后修改毫秒 
        ("EndUpdateTime", c_char * 13),    # 尾tick最后修改时间 
        ("EndUpdateMillisec", c_int64),    # 尾tick最后修改毫秒 
        ("PeriodMillisec", c_int),        #周期（毫秒）
        ("Open", c_int64),    # 开 
        ("Close", c_int64),    # 收 
        ("Low", c_int64),    # 低 
        ("High", c_int64),    # 高 
        ("Volume", c_uint64),    # 区间交易量 
        ("StartVolume", c_uint64),    # 初始总交易量 
        ("BestBidPrice", c_int64),     
        ("BestAskPrice", c_int64),
        ("CurrencyVolume", c_uint64),
        #("IsComplete", c_bool),     #这根K线是否完结(是否已经开始下一根K线)
        ]

class LFQryPositionField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 32),    # 经纪公司代码 
        ("InvestorID", c_char * 32),    # 投资者代码 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ]

class LFRspPositionField(Structure):
    _fields_ = [
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("YdPosition", c_uint64),    # 上日持仓
        ("Position", c_uint64),    # 总持仓
        ("BrokerID", c_char * 32),    # 经纪公司代码 
        ("InvestorID", c_char * 32),    # 投资者代码 
        ("PositionCost", c_int64),    # 持仓成本
        ("HedgeFlag", c_char),    # 投机套保标志 LfHedgeFlagType
        ("PosiDirection", c_char),    # 持仓多空方向 LfPosiDirectionType
        ]

class LFInputOrderField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),      # 经纪公司代码 
        ("UserID", c_char * 16),        # 用户代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ("BusinessUnit", c_char * 64),  # 业务单元 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("InstrumentID", c_char * 31),  # 合约代码 
        ("Expiry", c_char * 32),        # 合约到期时间 2020-10-10T10:00:00Z,ISO8601 #fixed
        ("OrderRef", c_char * 21),      # 报单引用 
        ("LimitPrice", c_int64),        # 价格 
        ("Volume", c_uint64),           # 数量 
        ("MinVolume", c_uint64),        # 最小成交量 
        ("TimeCondition", c_char),      # 有效期类型 LfTimeConditionType
        ("VolumeCondition", c_char),    # 成交量类型 LfVolumeConditionType
        ("OrderPriceType", c_char),     # 报单价格条件 LfOrderPriceTypeType
        ("Direction", c_char),          # 买卖方向 LfDirectionType
        ("OffsetFlag", c_char),         # 开平标志 LfOffsetFlagType
        ("HedgeFlag", c_char),          # 投机套保标志 LfHedgeFlagType
        ("ForceCloseReason", c_char),   # 强平原因 LfForceCloseReasonType
        ("StopPrice", c_double),        # 止损价 
        ("IsAutoSuspend", c_int),       # 自动挂起标志 
        ("ContingentCondition", c_char),# 触发条件 LfContingentConditionType
        ("MiscInfo", c_char * 64),      # 委托自定义标签 
        ("MassOrderSeqId", c_uint64),    
        ("MassOrderIndex", c_int),    
        ("MassOrderTotalNum", c_int),    
        ("ExpectPrice", c_int64),       # 期望价格 
        ("OrderExpiry", c_char * 32),   # 订单到期时间 2020-10-10T10:00:00Z,ISO8601 #fixed
        ]

class LFRtnOrderField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),    # 经纪公司代码 
        ("UserID", c_char * 16),    # 用户代码 
        ("ParticipantID", c_char * 11),    # 会员代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ("BusinessUnit", c_char * 64),    # 业务单元 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("OrderRef", c_char * 21),    # 报单引用 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("LimitPrice", c_int64),    # 价格 
        ("VolumeTraded", c_uint64),    # 今成交数量 
        ("VolumeTotal", c_uint64),    # 剩余数量 
        ("VolumeTotalOriginal", c_uint64),    # 数量 
        ("TimeCondition", c_char),    # 有效期类型 LfTimeConditionType
        ("VolumeCondition", c_char),    # 成交量类型 LfVolumeConditionType
        ("OrderPriceType", c_char),    # 报单价格条件 LfOrderPriceTypeType
        ("Direction", c_char),    # 买卖方向 LfDirectionType
        ("OffsetFlag", c_char),    # 开平标志 LfOffsetFlagType
        ("HedgeFlag", c_char),    # 投机套保标志 LfHedgeFlagType
        ("OrderStatus", c_char),    # 报单状态 LfOrderStatusType
        ("RequestID", c_int),    # 请求编号 
        ("GatewayTime",c_char*64),
        ]

class LFRtnTradeField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),    # 经纪公司代码 
        ("UserID", c_char * 16),    # 用户代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ("BusinessUnit", c_char * 64),    # 业务单元 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("OrderRef", c_char * 21),    # 报单引用 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("TradeID", c_char * 64),    # 成交编号 
        ("OrderSysID", c_char * 64),    # 报单编号 
        ("ParticipantID", c_char * 11),    # 会员代码 
        ("ClientID", c_char * 21),    # 客户代码 
        ("Price", c_int64),    # 价格 
        ("Volume", c_uint64),    # 数量 
        ("TradingDay", c_char * 13),    # 交易日 
        ("TradeTime", c_char * 32),    # 成交时间 
        ("Direction", c_char),    # 买卖方向 LfDirectionType
        ("OffsetFlag", c_char),    # 开平标志 LfOffsetFlagType
        ("HedgeFlag", c_char),    # 投机套保标志 LfHedgeFlagType
        ]

class LFOrderActionField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),    # 经纪公司代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ("InstrumentID", c_char * 31),    # 合约代码 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("UserID", c_char * 16),    # 用户代码 
        ("OrderRef", c_char * 21),    # 报单引用 
        ("OrderSysID", c_char * 31),    # 报单编号 
        ("RequestID", c_int),    # 请求编号 
        ("ActionFlag", c_char),    # 报单操作标志 char
        ("LimitPrice", c_int64),    # 价格 
        ("VolumeChange", c_uint64),    # 数量变化 
        ("KfOrderID", c_int),    # Kf系统内订单ID 
        ("MiscInfo", c_char * 64),    # 委托自定义标签 
        ("MassOrderSeqId", c_uint64),    
        ("MassOrderIndex", c_int),    
        ("MassOrderTotalNum", c_int),    
        ]

class LFQryAccountField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),    # 经纪公司代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ]

class LFPriceIndex(Structure):
    _fields_ = [
        ("InstrumentID", c_char * 31),
        ("TimeStamp", c_char * 31),         
        ("Price", c_double),
        ]

class LFMarkPrice(Structure):
    _fields_ = [
        ("InstrumentID", c_char * 31),
        ("Iv", c_double),  
        ("MarkPrice", c_double),
        ]

class LFPerpetual(Structure):
    _fields_ = [
        ("InstrumentID", c_char * 31),
        ("Interest", c_double),
        ]

class LFTicker(Structure):
    _fields_ = [
        ("InstrumentID", c_char * 31),
        ("Ask_iv", c_double),  
        ("Best_ask_amount", c_double),
        ("Best_ask_price", c_double),  
        ("Best_bid_amount", c_double),
        ("Best_bid_price", c_double),  
        ("Bid_iv", c_double),
        ("Mark_price", c_double),  
        ("Last_price", c_double),
        ("Open_interest", c_double),  
        ("Underlying_price", c_double),
        ("Delta", c_double),  
        ("Vega", c_double),        
        ("Volume24", c_double),
        ("Underlying_index", c_char * 31),   
        ]

class LFRspAccountField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),    # 经纪公司代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ("PreMortgage", c_double),    # 上次质押金额 
        ("PreCredit", c_double),    # 上次信用额度 
        ("PreDeposit", c_double),    # 上次存款额 
        ("preBalance", c_double),    # 上次结算准备金 
        ("PreMargin", c_double),    # 上次占用的保证金 
        ("Deposit", c_double),    # 入金金额 
        ("Withdraw", c_double),    # 出金金额 
        ("FrozenMargin", c_double),    # 冻结的保证金（报单未成交冻结的保证金） 
        ("FrozenCash", c_double),    # 冻结的资金（报单未成交冻结的总资金） 
        ("FrozenCommission", c_double),    # 冻结的手续费（报单未成交冻结的手续费） 
        ("CurrMargin", c_double),    # 当前保证金总额 
        ("CashIn", c_double),    # 资金差额 
        ("Commission", c_double),    # 手续费 
        ("CloseProfit", c_double),    # 平仓盈亏 
        ("PositionProfit", c_double),    # 持仓盈亏 
        ("Balance", c_double),    # 结算准备金 
        ("Available", c_double),    # 可用资金 
        ("WithdrawQuota", c_double),    # 可取资金 
        ("Reserve", c_double),    # 基本准备金 
        ("TradingDay", c_char * 9),    # 交易日 
        ("Credit", c_double),    # 信用额度 
        ("Mortgage", c_double),    # 质押金额 
        ("ExchangeMargin", c_double),    # 交易所保证金 
        ("DeliveryMargin", c_double),    # 投资者交割保证金 
        ("ExchangeDeliveryMargin", c_double),    # 交易所交割保证金 
        ("ReserveBalance", c_double),    # 保底期货结算准备金 
        ("Equity", c_double),    # 当日权益 
        ("MarketValue", c_double),    # 账户市值 
        ]

class LFErrorMsgField(Structure):
    _fields_ = [
    ("Type", c_char * 32),
    ("Name", c_char * 32),
    ("ErrorId", c_int),
    ("ErrorMsg", c_char * 128),
    ]
class LFTransferHistoryField(Structure):
    _fields_ = [
        ("IsWithdraw",c_bool),
        ("UserID", c_char * 64),  # 
        ("ExchangeID", c_char * 16),    # 
        ("Status", c_int),        #
        ("TimeStamp", c_char * 32),
        ("Volume", c_int64),
        ("Address", c_char * 130),
        ("Currency", c_char *32),
        ("Tag", c_char * 64),
        ("TxId", c_char *130),
        ("StartTime", c_char * 32),
        ("EndTime", c_char * 32),
        ("FromID", c_char * 64),
        ]


class LFInputQuoteField(Structure):
    _fields_ = [
        ('InstrumentID',c_char*32),
        ('OrderRef',c_char*21),
        ('ExchangeID',c_char*16),
        ('Price',c_int64),
        ('QuoteRequestID',c_int64)
    ]

class LFQuoteActionField(Structure):
    _fields_ = [
        ('InstrumentID',c_char*32),
        ('QuoteID',c_int64),
        ('OrderRef',c_char*21),
        ('RequestID',c_int),
        ('KfOrderID',c_int),
        ('ActionFlag',c_char)# 0 cancel Quote ,1  accept quote
    ]

class LFRtnQuoteField(Structure):
    _fields_ = [
    ('ID',c_int64),
    ('InstrumentID',c_char*32),
    ('OrderRef',c_char*21),
    ('ExchangeID',c_char*16),
    ('Price',c_int64),
    ('Volume',c_int64),
    ('QuoteRequestID',c_int64),
    ('RequestID',c_int),
    ('Direction',c_char),
    ('OrderStatus',c_char)
    ]

class LFGoogleTrendsData(Structure):
    _fields_ = [
        ("KeyWord",         c_char * 32),       #关键词
        ("CountryOrRegion", c_char * 32),       #国家地区
        ("Period",          c_char * 32),       #时间段 
        ("Type",            c_char * 32),       #类别 工商业、互联网、法律等
        ("GoogleService",   c_char * 32),       #谷歌网页搜索、youtube搜索等
                                                #以上均为搜索条件 下面皆为返回结果
        ("Time",            c_int64),           #时间戳
        ("FormattedTime",   c_char * 64),       #时间段
        ("FormattedAxisTime", c_char * 32),     #开始时间
        ("HasData",         c_bool),            #是否有数据
        ("Value",           c_int),             #数据
        ]

class BatchOrderInfoField(Structure):
   _fields_ = [
       ("OrderRef", c_char * 21), 
       ("OrderSysID", c_char * 31), 
       ("ActionFlag", c_char), 
       ("KfOrderID", c_int), 
       ("MiscInfo", c_char * 64)
       ]
   def __repr__(self):
      return "OrderRef:{},OrderSysID:{},ActionFlag:{},KfOrderID:{},MiscInfo:{}; ".format(
          self.OrderRef, self.OrderSysID, self.ActionFlag, self.KfOrderID, self.MiscInfo )

class BatchOrderInfo5Field(Structure):
   _fields_ = [("Info", BatchOrderInfoField * 5)]
   def __repr__(self):
      ret = ""
      for l in self.levels:
        ret += "{};".format(str(l))
      return ret


class LFBatchCancelOrderField(Structure):
    _fields_ = [
        ("BrokerID", c_char * 11),      # 经纪公司代码 
        ("InvestorID", c_char * 19),    # 投资者代码 
        ("InstrumentID", c_char * 31),  # 合约代码 
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("UserID", c_char * 16),        # 用户代码 
        ("SizeOfList", c_int),          # 一次性撤单的总个数 最大5
        ("RequestID", c_int),           # 请求编号
        ("InfoList", BatchOrderInfo5Field)
        ]

class LFGetKlineViaRest(Structure):
    _fields_ = [
        ("ExchangeID", c_char * 16),    # 交易所代码 
        ("Symbol", c_char * 31),        # 合约代码 
        ("Interval", c_char * 16),      # 时间间隔
        ("IgnoreStartTime", c_bool),    # 是否设置开始和结束时间
        ("StartTime", c_int64),         # 起始时间，时间戳
        ("EndTime", c_int64),           # 结束时间，时间戳
        ("Limit", c_int),               # 请求数量
        ("RequestID",    c_int),        # 请求编号
        ("MiscInfo", c_char * 64)       # Tag信息
        ]

class LFSingleBar(Structure):
   _fields_ = [
       ("StartUpdateMillisec", c_int64),    #开盘时间
       ("EndUpdateMillisec",   c_int64),    #收盘时间
       ("PeriodMillisec",      c_int),      #周期（毫秒）
       ("Open",                c_int64),    #开
       ("Close",               c_int64),    #收
       ("Low",                 c_int64),    #低
       ("High",                c_int64),    #高
       ("volume",              c_uint64),   #成交量
       ("BusinessVolume",      c_uint64),   #成交额
       ("ActInVolume",         c_uint64),   #主动买入成交量
       ("ActInBusinessVolume", c_uint64),   #主动买入成交额
       ("TransactionsNum",     c_int),      #成交笔数
       ]
   def __repr__(self):
      return " {},{},{},{}|{},{}|{} ".format(self.Open, self.Close, self.Low, self.High,
                                               self.StartUpdateMillisec,  self.EndUpdateMillisec, self.volume)

class LFBar1000(Structure):
   _fields_ = [("levels", LFSingleBar * 1000)]
   def __repr__(self):
      ret = ""
      for l in self.levels:
        ret += "{};".format(str(l))
      return ret

class LFBarSerial1000Field(Structure):
   _fields_ = [
        ("InstrumentID", c_char * 31),      #合约代码     
        ("ExchangeID",   c_char * 16),      #交易所代码
        ("BarLevel",     c_int),            #一共多少条
        ("BarSerial", LFBar1000)
        ]

DataFieldMap = {
    'LFL2MarketDataField': {
        'OfferVolumeA': 'd',
        'TotalOfferNumber': 'd',
        'WithdrawSellAmount': 'd',
        'BidCount3': 'i',
        'BidCount2': 'i',
        'BidCount1': 'i',
        'BidCount7': 'i',
        'BidCount6': 'i',
        'BidCount5': 'i',
        'BidCount4': 'i',
        'BidVolume7': 'd',
        'BidVolume6': 'd',
        'BidCount9': 'i',
        'BidCount8': 'i',
        'BidVolume3': 'd',
        'BidVolume2': 'd',
        'BidVolume1': 'd',
        'TradeCount': 'd',
        'BidPrice6': 'd',
        'PreIOPV': 'd',
        'TimeStamp': 'c9',
        'TradingDay': 'c9',
        'BidCountA': 'i',
        'OpenInterest': 'd',
        'BidVolumeA': 'd',
        'NumOfferOrders': 'd',
        'OfferVolume4': 'd',
        'OfferVolume5': 'd',
        'OfferVolume6': 'd',
        'OfferVolume7': 'd',
        'OfferVolume1': 'd',
        'OfferVolume2': 'd',
        'OfferVolume3': 'd',
        'OfferVolume8': 'd',
        'OfferVolume9': 'd',
        'ETFSellMoney': 'd',
        'TotalTradeVolume': 'd',
        'PriceDiff1': 'd',
        'PriceDiff2': 'd',
        'OfferPriceA': 'd',
        'BidPriceLevel': 'i',
        'TotalOfferVolume': 'd',
        'OfferPriceLevel': 'i',
        'InstrumentStatus': 'c7',
        'NumBidOrders': 'd',
        'ETFSellAmount': 'd',
        'WithdrawSellNumber': 'd',
        'AltWeightedAvgBidPrice': 'd',
        'WeightedAvgBidPrice': 'd',
        'OfferPrice8': 'd',
        'BidVolume9': 'd',
        'WithdrawBuyMoney': 'd',
        'OfferPrice4': 'd',
        'BidVolume8': 'd',
        'OfferPrice6': 'd',
        'OfferPrice7': 'd',
        'OfferPrice1': 'd',
        'OfferPrice2': 'd',
        'OfferPrice3': 'd',
        'WithdrawBuyAmount': 'd',
        'BidVolume5': 'd',
        'BidVolume4': 'd',
        'BidPrice9': 'd',
        'BidPrice8': 'd',
        'BidPrice5': 'd',
        'BidPrice4': 'd',
        'BidPrice7': 'd',
        'AltWeightedAvgOfferPrice': 'd',
        'BidPrice1': 'd',
        'TotalWarrantExecQty': 'd',
        'BidPrice3': 'd',
        'BidPrice2': 'd',
        'LowerLimitPrice': 'd',
        'OpenPrice': 'd',
        'WithdrawSellMoney': 'd',
        'OfferTradeMaxDuration': 'd',
        'OfferCount7': 'i',
        'WarrantPremiumRatio': 'd',
        'ExchangeID': 'c16',
        'ETFSellNumber': 'd',
        'AuctionPrice': 'd',
        'OfferPrice9': 'd',
        'YieldToMaturity': 'd',
        'OfferPrice5': 'd',
        'TradingPhase': 'c',
        'BidPriceA': 'd',
        'PERatio2': 'd',
        'TotalBidVolume': 'd',
        'PERatio1': 'd',
        'OfferCount8': 'i',
        'OfferCount9': 'i',
        'OfferCount6': 'i',
        'LowPrice': 'd',
        'OfferCount4': 'i',
        'OfferCount5': 'i',
        'OfferCount2': 'i',
        'OfferCount3': 'i',
        'TotalBidNumber': 'd',
        'OfferCount1': 'i',
        'WithdrawBuyNumber': 'd',
        'OpenRestriction': 'c',
        'BidTradeMaxDuration': 'd',
        'PreClosePrice': 'd',
        'UpperLimitPrice': 'd',
        'WeightedAvgOfferPrice': 'd',
        'InstrumentID': 'c31',
        'ClosePrice': 'd',
        'HighPrice': 'd',
        'TotalTradeValue': 'd',
        'IOPV': 'd',
        'LastPrice': 'd',
        'ETFBuyNumber': 'd',
        'ETFBuyMoney': 'd',
        'ETFBuyAmount': 'd',
        'OfferCountA': 'i',
    },
    'LFRtnTradeField': {
        'InstrumentID': 'c31',
        'ExchangeID': 'c16',
        'ParticipantID': 'c11',
        'TradeID': 'c64',
        'TradingDay': 'c13',
        'BusinessUnit': 'c64',
        'HedgeFlag': lf.LfHedgeFlagTypeMap,
        'Price': 'd',
        'UserID': 'c16',
        'Direction': lf.LfDirectionTypeMap,
        'ClientID': 'c21',
        'OrderRef': 'c21',
        'Volume': 'i',
        'InvestorID': 'c19',
        'BrokerID': 'c11',
        'OrderSysID': 'c64',
        'TradeTime': 'c32',
        'OffsetFlag': lf.LfOffsetFlagTypeMap,
    },
    'LFRspAccountField': {
        'Mortgage': 'd',
        'ExchangeDeliveryMargin': 'd',
        'FrozenMargin': 'd',
        'WithdrawQuota': 'd',
        'PositionProfit': 'd',
        'Commission': 'd',
        'Equity': 'd',
        'CashIn': 'd',
        'Available': 'd',
        'InvestorID': 'c19',
        'PreCredit': 'd',
        'PreMortgage': 'd',
        'ExchangeMargin': 'd',
        'PreMargin': 'd',
        'DeliveryMargin': 'd',
        'preBalance': 'd',
        'TradingDay': 'c9',
        'BrokerID': 'c11',
        'Deposit': 'd',
        'Withdraw': 'd',
        'Balance': 'd',
        'Reserve': 'd',
        'PreDeposit': 'd',
        'Credit': 'd',
        'MarketValue': 'd',
        'ReserveBalance': 'd',
        'CurrMargin': 'd',
        'FrozenCommission': 'd',
        'CloseProfit': 'd',
        'FrozenCash': 'd',
    },
    'LFL2IndexField': {
        'InstrumentID': 'c31',
        'ExchangeID': 'c16',
        'HighIndex': 'd',
        'TimeStamp': 'c9',
        'CloseIndex': 'd',
        'PreCloseIndex': 'd',
        'LastIndex': 'd',
        'TradingDay': 'c9',
        'OpenIndex': 'd',
        'TotalVolume': 'd',
        'LowIndex': 'd',
        'TurnOver': 'd',
    },
    'LFL2OrderField': {
        'InstrumentID': 'c31',
        'OrderTime': 'c9',
        'OrderKind': 'c2',
        'Price': 'd',
        'ExchangeID': 'c16',
        'Volume': 'd',
    },
    'LFQryPositionField': {
        'InstrumentID': 'c31',
        'InvestorID': 'c32',
        'ExchangeID': 'c16',
        'BrokerID': 'c32'
    },
    'LFGetKlineViaRest': {
        "ExchangeID":'c16',
        "Symbol": 'c31',
        "Interval": 'c16',
        "IgnoreStartTime": 'b',
        "StartTime": 'i64',
        "EndTime": 'i64',
        "Limit": 'i',
        "RequestID": 'i',
        "MiscInfo": 'c64'
    },
    'LFInputOrderField': {
        'InstrumentID': 'c31',
        'Expiry': 'c32',
        'ContingentCondition': lf.LfContingentConditionTypeMap,
        'ExchangeID': 'c16',
        'MinVolume': 'i',
        'OffsetFlag': lf.LfOffsetFlagTypeMap,
        'OrderPriceType': lf.LfOrderPriceTypeTypeMap,
        'BusinessUnit': 'c64',
        'HedgeFlag': lf.LfHedgeFlagTypeMap,
        'IsAutoSuspend': 'i',
        'ForceCloseReason': lf.LfForceCloseReasonTypeMap,
        'UserID': 'c16',
        'Direction': lf.LfDirectionTypeMap,
        'LimitPrice': 'd',
        'OrderRef': 'c21',
        'Volume': 'i',
        'InvestorID': 'c32',
        'VolumeCondition': lf.LfVolumeConditionTypeMap,
        'TimeCondition': lf.LfTimeConditionTypeMap,
        'BrokerID': 'c32',
        'MiscInfo': 'c64',
        'StopPrice': 'd',
        'MassOrderSeqId':'i64',
        'MassOrderIndex':'i',
        'MassOrderTotalNum':'i',
        'ExpectPrice':'i64',
        'OrderExpiry':'c32'
    },
    'LFRtnOrderField': {
        'InstrumentID': 'c31',
        'ExchangeID': 'c16',
        'ParticipantID': 'c11',
        'OrderPriceType': lf.LfOrderPriceTypeTypeMap,
        'BusinessUnit': 'c64',
        'HedgeFlag': lf.LfHedgeFlagTypeMap,
        'VolumeTotalOriginal': 'i',
        'RequestID': 'i',
        'UserID': 'c16',
        'Direction': lf.LfDirectionTypeMap,
        'LimitPrice': 'd',
        'OrderRef': 'c21',
        'InvestorID': 'c19',
        'VolumeCondition': lf.LfVolumeConditionTypeMap,
        'TimeCondition': lf.LfTimeConditionTypeMap,
        'BrokerID': 'c11',
        'OrderStatus': lf.LfOrderStatusTypeMap,
        'VolumeTraded': 'i',
        'VolumeTotal': 'i',
        'OffsetFlag': lf.LfOffsetFlagTypeMap,
        'GatewayTime':'c64'
    },
    'LFQryAccountField': {
        'InvestorID': 'c19',
        'BrokerID': 'c11',
    },
    'LFMarketDataField': {
        'HighestPrice': 'd',
        'BidPrice5': 'd',
        'BidPrice4': 'd',
        'BidPrice1': 'd',
        'BidPrice3': 'd',
        'BidPrice2': 'd',
        'LowerLimitPrice': 'd',
        'OpenPrice': 'd',
        'AskPrice5': 'd',
        'AskPrice4': 'd',
        'AskPrice3': 'd',
        'PreClosePrice': 'd',
        'AskPrice1': 'd',
        'PreSettlementPrice': 'd',
        'AskVolume1': 'i',
        'UpdateTime': 'c13',
        'UpdateMillisec': 'i',
        'BidVolume5': 'i',
        'BidVolume4': 'i',
        'BidVolume3': 'i',
        'BidVolume2': 'i',
        'PreOpenInterest': 'd',
        'AskPrice2': 'd',
        'Volume': 'i',
        'AskVolume3': 'i',
        'AskVolume2': 'i',
        'AskVolume5': 'i',
        'AskVolume4': 'i',
        'UpperLimitPrice': 'd',
        'BidVolume1': 'i',
        'InstrumentID': 'c31',
        'ClosePrice': 'd',
        'ExchangeID': 'c16',
        'TradingDay': 'c13',
        'PreDelta': 'd',
        'OpenInterest': 'd',
        'CurrDelta': 'd',
        'Turnover': 'd',
        'LastPrice': 'd',
        'SettlementPrice': 'd',
        'ExchangeInstID': 'c64',
        'LowestPrice': 'd',
    },
    'LFPriceBook20Field': {
        'InstrumentID' : 'c31',     
        'ExchangeID' : 'c16',     
        'UpdateMicroSecond' : 'i',
        'BidLevelCount' : 'i',
        'AskLevelCount' : 'i',
        'BidLevels' : [],    
        'AskLevels' : [],    
        'Status' : 'i',#FXW's edits
    },
    'LFFundingField': {
        'InstrumentID' : 'c31',     
        'ExchangeID' : 'c16',     
        'TimeStamp' : 'i64',
        'Interval' : 'i64',
        'Rate' : 'd',
        'RateDaily' : 'd',            
    },
    'LFQuoteRequestsField': {
        'InstrumentID' : 'c32',     
        'Expiry' : 'c32', 
        'ExchangeID' : 'c16',     
        'ID' : 'i64',
        'Price' : 'i64',
        'Volume' : 'i64',
        'OrderBSFlag' : 'c2',
        'RequestExpiry' : 'c32',     
        'Time' : 'c32',     
        'Status' : 'c9',                    
    },
    'LFWithdrawField': {
        'Currency' : 'c32',     
        'Volume' : 'i64',
        'Address':'c64',
        'Tag':'c64',    
        'ID':'c64',             
    },
    'LFTransferField': {
        'FromName':'c32',
        'From':'c64',
        'ToName':'c32',
        'To':'c64',
        'Currency' : 'c32',
        'Volume' : 'i64',
        'Symbol':'c32',
        'ID':'c64'
    },
    'LFErrorMsgField':{
        'Type' : 'c32',     
        'Name' : 'c32',
        'ErrorId':'i',
        'ErrorMsg':'c128',         
    },
    'LFRspPositionField': {
        'InstrumentID': 'c31',
        'PosiDirection': lf.LfPosiDirectionTypeMap,
        'HedgeFlag': lf.LfHedgeFlagTypeMap,
        'YdPosition': 'i',
        'InvestorID': 'c19',
        'PositionCost': 'd',
        'BrokerID': 'c11',
        'Position': 'i',
    },
    'LFBarMarketDataField': {
        'TradingDay': 'c9',    # 交易日 
        'InstrumentID': 'c31',    # 合约代码 
        'ExchangeID':'c16',      #交易所代码
        'UpperLimitPrice': 'i64',    # 涨停板价 
        'LowerLimitPrice': 'i64',    # 跌停板价 
        'StartUpdateTime': 'c13',    # 首tick修改时间 
        'StartUpdateMillisec': 'i64',    # 首tick最后修改毫秒 
        'EndUpdateTime': 'c13',    # 尾tick最后修改时间 
        'EndUpdateMillisec': 'i64',    # 尾tick最后修改毫秒 
        'PeriodMillisec': 'i',        #周期（毫秒）
        'Open':'i64',    
        'Close':'i64',    # 收 
        'Low':'i64',    # 低 
        'High':'i64',    # 高 
        'Volume': 'i64',    # 区间交易量 
        'StartVolume': 'i64',    # 初始总交易量 
        'BestBidPrice':'i64',     
        'BestAskPrice':'i64',
        "CurrencyVolume":'i64',
        #"IsComplete":'b',
    },
    'LFL2TradeField': {
        'InstrumentID': 'c31',
        'ExchangeID': 'c16',
        'OrderKind': 'c2',
        'OrderBSFlag': 'c2',
        'Price': 'i64',
        'Volume': 'i64',
        'TradeTime': 'c32',
        'MakerOrderID':'c64',
        'TakerOrderID':'c64',
        'TradeID':'c64',
        'Sequence':'c32',
        'Status':'i',
        'Imbalance':'i64',
        'FairPrice':'i64',
        'IndexPrice':'i64',
        'MarkPrice':'i64',
        'TimeStamp':'i64',
        'Liquidation':'b',
    },
    'LFOrderActionField': {
        'InstrumentID': 'c31',
        'ExchangeID': 'c16',
        'ActionFlag': 'c',
        'KfOrderID': 'i',
        'UserID': 'c16',
        'LimitPrice': 'd',
        'OrderRef': 'c21',
        'InvestorID': 'c19',
        'VolumeChange': 'i',
        'BrokerID': 'c11',
        'RequestID': 'i',
        'OrderSysID': 'c31',
        'MiscInfo': 'c64',
        'MassOrderSeqId':'i64',
        'MassOrderIndex':'i',
        'MassOrderTotalNum':'i',
    },
    'LFTransferHistoryField': {
        'IsWithdraw':'b',
        'UserID': 'c64',
        'ExchangeID': 'c16',
        'Status': 'i',
        'TimeStamp': 'c32',
        'Volume': 'i64',
        'Address': 'c130',
        'Currency': 'c32',
        'Tag': 'c64',
        'TxId': 'c130',
        'StartTime': 'c32',
        'EndTime': 'c32',
        'FromID': 'c64',
    },
    'LFPriceIndex': {
            'InstrumentID': 'c31',
            'TimeStamp': 'c31',
            'Price': 'd',
    },
    'LFMarkPrice': {
            'InstrumentID': 'c31',
            'Iv': 'd',
            'MarkPrice': 'd',
    },
    'LFPerpetual': {
            'InstrumentID': 'c31',
            'Interest': 'd',
    },
    'LFTicker': {
        'InstrumentID': 'c31',
        'Ask_iv': 'd',
        'Best_ask_amount': 'd',
        'Best_ask_price': 'd',
        'Best_bid_amount': 'd',
        'Best_bid_price': 'd',
        'Bid_iv': 'd',
        'Mark_price': 'd',
        'Last_price': 'd',
        'Open_interest': 'd',
        'Underlying_price': 'd',
        'Delta': 'd',
        'Vega': 'd',
        'Volume24': 'd',
        'Underlying_index': 'c31',
    },
    'LFInputQuoteField':{
        'InstrumentID':'c32',
        'OrderRef':'c21',
        'ExchangeID':'c16',
        'Price':'i64',
        'QuoteRequestID':'i64'
    },
    'LFQuoteActionField':{
        'InstrumentID':'c32',
        'QuoteID':'i64',
        'OrderRef':'c21',
        'RequestID':'i',
        'KfOrderID':'i',
        'ActionFlag':'c'# 0 cancel Quote ,1  accept quote
    },
    'LFRtnQuoteField':{
        'ID':'i64',
        'InstrumentID':'c32',
        'OrderRef':'c21',
        'ExchangeID':'c16',
        'Price':'i64',
        'Volume':'i64',
        'QuoteRequestID':'i64',
        'RequestID':'i',
        'Direction':'c',
        'OrderStatus':'c'
    },
    'LFGoogleTrendsData': {
        'KeyWord':          'c32',
        'CountryOrRegion':  'c32',
        'Period':           'c32',
        'Type':             'c32',
        'GoogleService':    'c32',
        'Time':             'i64',
        'FormattedTime':    'c64',
        'FormattedAxisTime': 'c32',
        'HasData':          'b',
        'Value':            'i',
    },
    'LFBatchCancelOrderField':{
        "BrokerID":          'c11',
        "InvestorID":        'c19',
        "InstrumentID":      'c31',
        "ExchangeID":        'c16',
        "UserID":            'c16',
        "SizeOfList":        'i',
        "RequestID":         'i',
        "InfoList":          []
    }
}

MsgType2LFStruct = {
    lf.MsgTypes.MD: LFMarketDataField,
    lf.MsgTypes.L2_MD: LFL2MarketDataField,
    lf.MsgTypes.PRICE_BOOK_20: LFPriceBook20Field,
    lf.MsgTypes.PRICE_BOOK_REST: LFPriceBook20Field,
    lf.MsgTypes.FUNDING: LFFundingField,
    lf.MsgTypes.QUOTE_REQUESTS: LFQuoteRequestsField,
    lf.MsgTypes.L2_INDEX: LFL2IndexField,
    lf.MsgTypes.L2_ORDER: LFL2OrderField,
    lf.MsgTypes.L2_TRADE: LFL2TradeField,
    lf.MsgTypes.BAR_MD: LFBarMarketDataField,
    lf.MsgTypes.QRY_POS: LFQryPositionField,
    lf.MsgTypes.RSP_POS: LFRspPositionField,
    lf.MsgTypes.ORDER: LFInputOrderField,
    lf.MsgTypes.RTN_ORDER: LFRtnOrderField,
    lf.MsgTypes.RTN_TRADE: LFRtnTradeField,
    lf.MsgTypes.ORDER_ACTION: LFOrderActionField,
    lf.MsgTypes.QRY_ACCOUNT: LFQryAccountField,
    lf.MsgTypes.RSP_ACCOUNT: LFRspAccountField,
    lf.MsgTypes.WITHDRAW:LFWithdrawField,
    lf.MsgTypes.TRENDS_DATA:LFGoogleTrendsData,
    lf.MsgTypes.ERRORMSG:LFErrorMsgField,
    lf.MsgTypes.INNER_TRANSFER:LFTransferField,
    lf.MsgTypes.TRANSFER_HISTORY : LFTransferHistoryField,
    lf.MsgTypes.PRICE_INDEX: LFPriceIndex,
    lf.MsgTypes.MARKPRICE:LFMarkPrice,
    lf.MsgTypes.PERPETUAL: LFPerpetual,
    lf.MsgTypes.TICKER: LFTicker,
    lf.MsgTypes.QUOTE:LFInputQuoteField,
    lf.MsgTypes.RTN_QUOTE:LFRtnQuoteField,
    lf.MsgTypes.QUOTE_ACTION:LFQuoteActionField,
    lf.MsgTypes.BATCH_CANCEL_ORDER:LFBatchCancelOrderField,
    lf.MsgTypes.GET_KLINE_VIA_REST:LFGetKlineViaRest,
    lf.MsgTypes.BAR_SERIAL1000:LFBarSerial1000Field,

    lf.MsgTypes.MSG_TYPE_LF_MD_BINANCE: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BINANCE: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BINANCE: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BINANCE: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BINANCE: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BINANCE: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BINANCE: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_BINANCE: LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_BINANCE: LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_BINANCE : LFTransferHistoryField,
    lf.MsgTypes.MSG_TYPE_LF_GET_KLINE_VIA_REST_BINANCE : LFGetKlineViaRest,
    lf.MsgTypes.MSG_TYPE_LF_BAR_SERIAL1000_BINANCE : LFBarSerial1000Field,

    lf.MsgTypes.MSG_TYPE_LF_MD_INDODAX: LFMarketDataField,
    # lf.MsgTypes.QRY_POS: LFQryPositionField,
    # lf.MsgTypes.RSP_POS: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_INDODAX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_INDODAX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_INDODAX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_INDODAX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_OKEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_OKEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_OKEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_OKEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_OKEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_OKEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_OKEX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_COINMEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_COINMEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_COINMEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_COINMEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_COINMEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_COINMEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_COINMEX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_BITFINEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITFINEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITFINEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITFINEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITFINEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITFINEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITFINEX: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_BITFINEX:LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_BITFINEX:LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_BITFINEX : LFTransferHistoryField,

    lf.MsgTypes.MSG_TYPE_LF_MD_ASCENDEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_ASCENDEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_ASCENDEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ASCENDEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_ASCENDEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_ASCENDEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_ASCENDEX: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_ASCENDEX:LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_ASCENDEX:LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_ASCENDEX : LFTransferHistoryField,
    lf.MsgTypes.MSG_TYPE_LF_BATCH_CANCEL_ORDER_ASCENDEX: LFBatchCancelOrderField,
    lf.MsgTypes.MSG_TYPE_LF_GET_KLINE_VIA_REST_ASCENDEX : LFGetKlineViaRest,
    lf.MsgTypes.MSG_TYPE_LF_BAR_SERIAL1000_ASCENDEX : LFBarSerial1000Field,

    lf.MsgTypes.MSG_TYPE_LF_MD_BITTREX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITTREX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITTREX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITTREX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITTREX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITTREX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITTREX: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_BITTREX:LFWithdrawField,

    lf.MsgTypes.MSG_TYPE_LF_MD_BITMEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITMEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITMEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITMEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITMEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITMEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITMEX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_HUOBI: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_HUOBI: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_HUOBI: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_HUOBI: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_HUOBI: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_HUOBI: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_HUOBI: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_HUOBI:LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_HUOBI:LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_HUOBI : LFTransferHistoryField,

    lf.MsgTypes.MSG_TYPE_LF_MD_OCEANEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_OCEANEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_OCEANEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_OCEANEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_OCEANEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_OCEANEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_OCEANEX: LFOrderActionField,

    #lf.MsgTypes.MSG_TYPE_LF_MD_OCEANEXB: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_OCEANEXB: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_OCEANEXB: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_OCEANEXB: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_OCEANEXB: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_OCEANEXB: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_OCEANEXB: LFOrderActionField,
    # probit
    lf.MsgTypes.MSG_TYPE_LF_MD_PROBIT: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_PROBIT: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_PROBIT: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_PROBIT: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_PROBIT: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_PROBIT: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_PROBIT: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_BITHUMB: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITHUMB: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITHUMB: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITHUMB: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITHUMB: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITHUMB: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITHUMB: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_UPBIT: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_UPBIT: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_UPBIT: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_UPBIT: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_UPBIT: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_UPBIT: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_UPBIT: LFOrderActionField,


    lf.MsgTypes.MSG_TYPE_LF_MD_DAYBIT: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_DAYBIT: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_DAYBIT: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_DAYBIT: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_DAYBIT: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_DAYBIT: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_DAYBIT: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_KUCOIN: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_KUCOIN: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_KUCOIN: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_KUCOIN: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_KUCOIN: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_KUCOIN: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_KUCOIN: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_KUCOIN:LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_KUCOIN:LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_KUCOIN : LFTransferHistoryField,
    
    lf.MsgTypes.MSG_TYPE_LF_MD_BITFLYER: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITFLYER: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITFLYER: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITFLYER: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITFLYER: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITFLYER: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITFLYER: LFOrderActionField,
    
    lf.MsgTypes.MSG_TYPE_LF_MD_KRAKEN: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_KRAKEN: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_KRAKEN: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_KRAKEN: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_KRAKEN: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_KRAKEN: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_KRAKEN: LFOrderActionField,
    
    lf.MsgTypes.MSG_TYPE_LF_MD_IB: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_IB: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_IB: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_IB: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_IB: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_IB: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_IB: LFOrderActionField,

    
    lf.MsgTypes.MSG_TYPE_LF_MD_BITTREX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITTREX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITTREX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITTREX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITTREX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITTREX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITTREX: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_BITTREX : LFTransferHistoryField,

    lf.MsgTypes.MSG_TYPE_LF_MD_POLONIEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_POLONIEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_POLONIEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_POLONIEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_POLONIEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_POLONIEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_POLONIEX: LFOrderActionField,
    
    lf.MsgTypes.MSG_TYPE_LF_MD_BITSTAMP: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BITSTAMP: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BITSTAMP: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BITSTAMP: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BITSTAMP: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BITSTAMP: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BITSTAMP: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_DERIBIT: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_DERIBIT: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_DERIBIT: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_DERIBIT: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_DERIBIT: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_DERIBIT: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_DERIBIT: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_PRICE_INDEX_DERIBIT: LFPriceIndex,
    lf.MsgTypes.MSG_TYPE_LF_MARKPRICE_DERIBIT: LFMarkPrice,
    lf.MsgTypes.MSG_TYPE_LF_PERPETUAL_DERIBIT: LFPerpetual,
    lf.MsgTypes.MSG_TYPE_LF_TICKER_DERIBIT: LFTicker,  

    lf.MsgTypes.MSG_TYPE_LF_MD_EMX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_EMX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_EMX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_EMX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_EMX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_EMX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_EMX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_COINFLEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_COINFLEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_COINFLEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_COINFLEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_COINFLEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_COINFLEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_COINFLEX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_COINFLOOR: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_COINFLOOR: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_COINFLOOR: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_COINFLOOR: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_COINFLOOR: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_COINFLOOR: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_COINFLOOR: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_MOCKKUCOIN: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_MOCKKUCOIN: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_MOCKKUCOIN: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_MOCKKUCOIN: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_MOCKKUCOIN: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_MOCKKUCOIN: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_MOCKKUCOIN: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_MOCKBITMEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_MOCKBITMEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_MOCKBITMEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_MOCKBITMEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_MOCKBITMEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_MOCKBITMEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_MOCKBITMEX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_BINANCEF: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BINANCEF: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BINANCEF: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BINANCEF: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BINANCEF: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BINANCEF: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BINANCEF: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_BATCH_CANCEL_ORDER_BINANCEF: LFBatchCancelOrderField,
    lf.MsgTypes.MSG_TYPE_LF_GET_KLINE_VIA_REST_BINANCEF : LFGetKlineViaRest,
    lf.MsgTypes.MSG_TYPE_LF_BAR_SERIAL1000_BINANCEF : LFBarSerial1000Field,

    lf.MsgTypes.MSG_TYPE_LF_MD_HBDM: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_HBDM: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_HBDM: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_HBDM: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_HBDM: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_HBDM: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_HBDM: LFOrderActionField,
    
    lf.MsgTypes.MSG_TYPE_LF_MD_KUMEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_KUMEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_KUMEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_KUMEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_KUMEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_KUMEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_KUMEX: LFOrderActionField,
    
    lf.MsgTypes.MSG_TYPE_LF_MD_ERISX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_ERISX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_ERISX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ERISX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_ERISX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_ERISX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_ERISX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_BEQUANT: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BEQUANT: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BEQUANT: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BEQUANT: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BEQUANT: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BEQUANT: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BEQUANT: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_KRAKENF: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_KRAKENF: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_KRAKENF: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_KRAKENF: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_KRAKENF: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_KRAKENF: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_KRAKENF: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_COINCHECK: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_COINCHECK: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_COINCHECK: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_COINCHECK: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_COINCHECK: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_COINCHECK: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_COINCHECK: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_OKEXF: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_OKEXF: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_OKEXF: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_OKEXF: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_OKEXF: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_OKEXF: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_OKEXF: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_OKEXF:LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_OKEXF:LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_OKEXF : LFTransferHistoryField,

    lf.MsgTypes.MSG_TYPE_LF_MD_FTX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_FTX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_FTX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_FTX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_FTX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_FTX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_FTX: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_WITHDRAW_FTX:LFWithdrawField,
    lf.MsgTypes.MSG_TYPE_LF_INNER_TRANSFER_FTX:LFTransferField,
    lf.MsgTypes.MSG_TYPE_LF_TRANSFER_HISTORY_FTX : LFTransferHistoryField,

    lf.MsgTypes.MSG_TYPE_LF_MD_MOCKHBDM: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_MOCKHBDM: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_MOCKHBDM: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_MOCKHBDM: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_MOCKHBDM: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_MOCKHBDM: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_MOCKHBDM: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_MOCKCOINFLEX: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_MOCKCOINFLEX: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_MOCKCOINFLEX: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_MOCKCOINFLEX: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_MOCKCOINFLEX: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_MOCKCOINFLEX: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_MOCKCOINFLEX: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_MOCKBINANCE: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_MOCKBINANCE: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_MOCKBINANCE: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_MOCKBINANCE: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_MOCKBINANCE: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_MOCKBINANCE: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_MOCKBINANCE: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_MOCKDERIBIT: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_MOCKDERIBIT: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_MOCKDERIBIT: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_MOCKDERIBIT: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_MOCKDERIBIT: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_MOCKDERIBIT: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_MOCKDERIBIT: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_GOOGLETRENDS: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_TRENDS_DATA_GOOGLETRENDS: LFGoogleTrendsData,

    lf.MsgTypes.MSG_TYPE_LF_MD_QDP: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_QDP: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_QDP: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_QDP: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_QDP: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_QDP: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_QDP: LFOrderActionField,

    lf.MsgTypes.MSG_TYPE_LF_MD_BINANCED: LFMarketDataField,
    lf.MsgTypes.MSG_TYPE_LF_QRY_POS_BINANCED: LFQryPositionField,
    lf.MsgTypes.MSG_TYPE_LF_RSP_POS_BINANCED: LFRspPositionField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_BINANCED: LFInputOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_ORDER_BINANCED: LFRtnOrderField,
    lf.MsgTypes.MSG_TYPE_LF_RTN_TRADE_BINANCED: LFRtnTradeField,
    lf.MsgTypes.MSG_TYPE_LF_ORDER_ACTION_BINANCED: LFOrderActionField,
    lf.MsgTypes.MSG_TYPE_LF_BATCH_CANCEL_ORDER_BINANCED: LFBatchCancelOrderField,
    lf.MsgTypes.MSG_TYPE_LF_GET_KLINE_VIA_REST_BINANCED : LFGetKlineViaRest,
    lf.MsgTypes.MSG_TYPE_LF_BAR_SERIAL1000_BINANCED : LFBarSerial1000Field,
}

MsgType2LFStruct.update(SnifferMsgType2Struct)

LFStruct2MsgType = {
    LFMarketDataField: lf.MsgTypes.MD,
    LFPriceBook20Field: lf.MsgTypes.PRICE_BOOK_20,
    LFFundingField:lf.MsgTypes.FUNDING,
    LFQuoteRequestsField:lf.MsgTypes.QUOTE_REQUESTS,
    LFL2MarketDataField: lf.MsgTypes.L2_MD,
    LFL2IndexField: lf.MsgTypes.L2_INDEX,
    LFL2OrderField: lf.MsgTypes.L2_ORDER,
    LFL2TradeField: lf.MsgTypes.L2_TRADE,
    LFBarMarketDataField: lf.MsgTypes.BAR_MD,
    LFQryPositionField: lf.MsgTypes.QRY_POS,
    LFRspPositionField: lf.MsgTypes.RSP_POS,
    LFInputOrderField: lf.MsgTypes.ORDER,
    LFRtnOrderField: lf.MsgTypes.RTN_ORDER,
    LFRtnTradeField: lf.MsgTypes.RTN_TRADE,
    LFOrderActionField: lf.MsgTypes.ORDER_ACTION,
    LFQryAccountField: lf.MsgTypes.QRY_ACCOUNT,
    LFRspAccountField: lf.MsgTypes.RSP_ACCOUNT,
    LFWithdrawField:lf.MsgTypes.WITHDRAW,
    LFErrorMsgField:lf.MsgTypes.ERRORMSG,
    LFTransferField:lf.MsgTypes.INNER_TRANSFER,
    LFTransferHistoryField: lf.MsgTypes.TRANSFER_HISTORY,
    LFPriceIndex: lf.MsgTypes.PRICE_INDEX,
    LFMarkPrice:lf.MsgTypes.MARKPRICE,
    LFPerpetual : lf.MsgTypes.PERPETUAL,
    LFTicker : lf.MsgTypes.TICKER,
    LFInputQuoteField:lf.MsgTypes.QUOTE,
    LFRtnQuoteField:lf.MsgTypes.RTN_QUOTE,
    LFQuoteActionField:lf.MsgTypes.QUOTE_ACTION,
    LFGoogleTrendsData : lf.MsgTypes.TRENDS_DATA,
    LFBatchCancelOrderField: lf.MsgTypes.BATCH_CANCEL_ORDER,
    LFGetKlineViaRest: lf.MsgTypes.GET_KLINE_VIA_REST,
    LFBarSerial1000Field: lf.MsgTypes.BAR_SERIAL1000
}

